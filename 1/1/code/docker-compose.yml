version: '3.8'

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  glpi_data:
  glpi_db:
  elasticsearch_data1:
  elasticsearch_data2:
  elasticsearch_data3:
  cassandra_data1:
  cassandra_data2:
  cassandra_data3:
  prometheus_data:
  grafana_data:
  traefik_certs:

services:
  # ==========================================
  # PARE-FEU / REVERSE PROXY - Traefik
  # ==========================================
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certs:/letsencrypt
    networks:
      - frontend
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.local`)"
      - "traefik.http.routers.dashboard.service=api@internal"

  # ==========================================
  # TICKETING - GLPI + MariaDB (HA)
  # ==========================================
  glpi_db_master:
    image: mariadb:10.11
    container_name: glpi_db_master
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: glpi
      MYSQL_USER: glpi
      MYSQL_PASSWORD: glpipassword
      MYSQL_REPLICATION_MODE: master
      MYSQL_REPLICATION_USER: replicator
      MYSQL_REPLICATION_PASSWORD: replicatorpass
    volumes:
      - glpi_db:/var/lib/mysql
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  glpi:
    image: diouxx/glpi:latest
    container_name: glpi
    restart: unless-stopped
    depends_on:
      - glpi_db_master
    environment:
      TIMEZONE: Europe/Paris
    volumes:
      - glpi_data:/var/www/html/glpi
    networks:
      - frontend
      - backend
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.glpi.rule=Host(`glpi.local`)"
      - "traefik.http.routers.glpi.entrypoints=web"
      - "traefik.http.services.glpi.loadbalancer.server.port=80"
      - "traefik.docker.network=frontend"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # HISTORISATION - Cluster Elasticsearch (HA)
  # ==========================================
  elasticsearch-master:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch-master
    restart: unless-stopped
    environment:
      - node.name=es-master
      - cluster.name=bigdata-cluster
      - discovery.seed_hosts=elasticsearch-data1,elasticsearch-data2
      - cluster.initial_master_nodes=es-master
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - node.roles=master
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data1:/usr/share/elasticsearch/data
    networks:
      - backend
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  elasticsearch-data1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch-data1
    restart: unless-stopped
    environment:
      - node.name=es-data1
      - cluster.name=bigdata-cluster
      - discovery.seed_hosts=elasticsearch-master,elasticsearch-data2
      - cluster.initial_master_nodes=es-master
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
      - node.roles=data,ingest
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data2:/usr/share/elasticsearch/data
    networks:
      - backend
      - monitoring

  elasticsearch-data2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch-data2
    restart: unless-stopped
    environment:
      - node.name=es-data2
      - cluster.name=bigdata-cluster
      - discovery.seed_hosts=elasticsearch-master,elasticsearch-data1
      - cluster.initial_master_nodes=es-master
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
      - node.roles=data,ingest
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data3:/usr/share/elasticsearch/data
    networks:
      - backend
      - monitoring

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    restart: unless-stopped
    depends_on:
      - elasticsearch-master
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch-master:9200"]'
      ELASTICSEARCH_URL: http://elasticsearch-master:9200
    networks:
      - frontend
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`kibana.local`)"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"
      - "traefik.docker.network=frontend"

  # ==========================================
  # DATALAKE - Cluster Cassandra (HA)
  # ==========================================
  cassandra-seed:
    image: cassandra:4.1
    container_name: cassandra-seed
    restart: unless-stopped
    environment:
      - CASSANDRA_CLUSTER_NAME=BigDataCluster
      - CASSANDRA_DC=DC1
      - CASSANDRA_RACK=RACK1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_SEEDS=cassandra-seed
      - MAX_HEAP_SIZE=2G
      - HEAP_NEWSIZE=400M
    volumes:
      - cassandra_data1:/var/lib/cassandra
    networks:
      - backend
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "nodetool status"]
      interval: 30s
      timeout: 10s
      retries: 5

  cassandra-node1:
    image: cassandra:4.1
    container_name: cassandra-node1
    restart: unless-stopped
    depends_on:
      - cassandra-seed
    environment:
      - CASSANDRA_CLUSTER_NAME=BigDataCluster
      - CASSANDRA_DC=DC1
      - CASSANDRA_RACK=RACK1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_SEEDS=cassandra-seed
      - MAX_HEAP_SIZE=2G
      - HEAP_NEWSIZE=400M
    volumes:
      - cassandra_data2:/var/lib/cassandra
    networks:
      - backend
      - monitoring

  cassandra-node2:
    image: cassandra:4.1
    container_name: cassandra-node2
    restart: unless-stopped
    depends_on:
      - cassandra-seed
    environment:
      - CASSANDRA_CLUSTER_NAME=BigDataCluster
      - CASSANDRA_DC=DC1
      - CASSANDRA_RACK=RACK2
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_SEEDS=cassandra-seed
      - MAX_HEAP_SIZE=2G
      - HEAP_NEWSIZE=400M
    volumes:
      - cassandra_data3:/var/lib/cassandra
    networks:
      - backend
      - monitoring

  # ==========================================
  # MONITORING - Prometheus + Grafana + Exporters
  # ==========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.local`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.docker.network=monitoring"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    networks:
      - frontend
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.local`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.docker.network=frontend"

  # Node Exporter pour métriques système
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring

  # Cadvisor pour métriques Docker
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring

  # Elasticsearch Exporter
  elasticsearch-exporter:
    image: quay.io/prometheuscommunity/elasticsearch-exporter:latest
    container_name: elasticsearch-exporter
    restart: unless-stopped
    command:
      - '--es.uri=http://elasticsearch-master:9200'
    networks:
      - backend
      - monitoring

  # ==========================================
  # BACKUP - Duplicati pour sauvegardes automatiques
  # ==========================================
  duplicati:
    image: duplicati/duplicati:latest
    container_name: duplicati
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
    volumes:
      - ./backups/duplicati:/config
      - ./backups/data:/backups
      - glpi_data:/source/glpi:ro
      - elasticsearch_data1:/source/elasticsearch:ro
      - cassandra_data1:/source/cassandra:ro
      - grafana_data:/source/grafana:ro
    networks:
      - frontend
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.duplicati.rule=Host(`backup.local`)"
      - "traefik.http.services.duplicati.loadbalancer.server.port=8200"

  # ==========================================
  # HEALTHCHECK - Service de contrôle de santé
  # ==========================================
  healthcheck:
    image: willfarrell/autoheal:latest
    container_name: autoheal
    restart: unless-stopped
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - monitoring

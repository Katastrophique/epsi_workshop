from gpt4all import GPT4All
import json
import os
from datetime import datetime

class EPSIChatbot:
    def __init__(self):
        print("üîÑ Chargement du mod√®le GPT4All...")
        self.model = GPT4All("orca-mini-3b-gguf2-q4_0.gguf")
        print("‚úÖ Mod√®le charg√© avec succ√®s!")
        
        # Charger la base de connaissances
        self.knowledge_base = self.load_knowledge_base()
        self.faq = self.load_faq()
        self.conversation_history = []
        
    def load_knowledge_base(self):
        """Charge la base de connaissances depuis le fichier JSON"""
        try:
            with open('knowledge_base.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print("‚ö†Ô∏è  Fichier knowledge_base.json introuvable. Utilisation des donn√©es par d√©faut.")
            return self.get_default_knowledge_base()
    
    def load_faq(self):
        """Charge les FAQ depuis le fichier JSON"""
        try:
            with open('faq.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print("‚ö†Ô∏è  Fichier faq.json introuvable. Utilisation des FAQ par d√©faut.")
            return self.get_default_faq()
    
    def get_default_knowledge_base(self):
        """Base de connaissances par d√©faut"""
        return {
            "general": {
                "nom": "EPSI Lyon",
                "type": "√âcole d'ing√©nierie informatique",
                "ville": "Lyon, quartier Part-Dieu",
                "description": "L'EPSI forme des experts en informatique et syst√®mes d'information"
            },
            "programmes": {
                "bachelor": [
                    "Bachelor D√©veloppement (Bac+3)",
                    "Bachelor Infrastructure & R√©seaux (Bac+3)",
                    "Bachelor Cybers√©curit√© (Bac+3)"
                ],
                "mastere": [
                    "Mast√®re Expert en Informatique et Syst√®mes d'Information (Bac+5)",
                    "Mast√®re Architecture Logicielle (Bac+5)",
                    "Mast√®re Cybers√©curit√© (Bac+5)"
                ],
                "modalites": "Formation en initial ou en alternance d√®s la 3√®me ann√©e"
            },
            "admission": {
                "post_bac": "Candidature via Parcoursup ou directement sur le site EPSI",
                "processus": "√âtude du dossier + entretien de motivation",
                "admissions_paralleles": "Possibilit√© d'int√©grer en 3√®me ou 4√®me ann√©e",
                "prerequis": "Bac g√©n√©ral ou technologique, passion pour l'informatique"
            },
            "alternance": {
                "debut": "Possible d√®s la 3√®me ann√©e (Bachelor 3 ou Mast√®re 1)",
                "rythme": "3 semaines en entreprise / 1 semaine √† l'√©cole",
                "avantages": [
                    "Frais de scolarit√© pris en charge par l'entreprise",
                    "Salaire mensuel",
                    "Exp√©rience professionnelle concr√®te",
                    "Facilite l'insertion professionnelle"
                ]
            },
            "campus": {
                "localisation": "Lyon Part-Dieu, proche des transports",
                "equipements": [
                    "Salles informatiques √©quip√©es",
                    "Espace coworking",
                    "Laboratoires techniques",
                    "Salles de r√©union pour projets"
                ]
            },
            "debouches": {
                "metiers": [
                    "D√©veloppeur Full-Stack",
                    "DevOps Engineer",
                    "Architecte logiciel",
                    "Expert Cybers√©curit√©",
                    "Data Engineer",
                    "Chef de projet IT",
                    "Consultant IT"
                ],
                "secteurs": [
                    "ESN (Entreprises de Services Num√©riques)",
                    "Startups tech",
                    "Grands groupes",
                    "Banques et assurances",
                    "E-commerce"
                ]
            },
            "vie_etudiante": {
                "bde": "Bureau Des √âtudiants actif organisant des √©v√©nements r√©guliers",
                "evenements": [
                    "Hackathons et challenges de programmation",
                    "Conf√©rences avec des professionnels",
                    "Soir√©es et √©v√©nements festifs",
                    "Projets collaboratifs inter-promotions"
                ],
                "partenariats": "R√©seau d'entreprises partenaires pour stages et alternances"
            }
        }
    
    def get_default_faq(self):
        """FAQ par d√©faut"""
        return {
            "tarif": "Pour conna√Ætre les tarifs pr√©cis de l'EPSI Lyon, je vous invite √† contacter directement le service admissions ou √† consulter le site officiel epsi.fr. Les tarifs varient selon le programme et le mode de formation (initial ou alternance).",
            "contact": "Vous pouvez contacter l'EPSI Lyon par t√©l√©phone ou via le formulaire de contact sur epsi.fr. Le campus est situ√© dans le quartier Part-Dieu √† Lyon.",
            "portes ouvertes": "L'EPSI Lyon organise plusieurs journ√©es portes ouvertes dans l'ann√©e. Consultez le site epsi.fr rubrique '√âv√©nements' pour conna√Ætre les prochaines dates.",
            "stages": "Des stages sont pr√©vus √† chaque ann√©e du cursus. En Bachelor, plusieurs stages de 2 √† 6 mois. En Mast√®re, des stages longue dur√©e ou l'alternance.",
            "logement": "L'EPSI peut vous accompagner dans votre recherche de logement √† Lyon. Des partenariats existent avec des r√©sidences √©tudiantes proches du campus.",
            "international": "L'EPSI propose des opportunit√©s de stages √† l'international et des partenariats avec des universit√©s √©trang√®res pour des √©changes acad√©miques."
        }
    
    def find_relevant_context(self, question):
        """Trouve le contexte pertinent selon la question"""
        question_lower = question.lower()
        relevant_sections = []
        
        # Mapping des mots-cl√©s vers les sections
        keywords_map = {
            "programmes": ["programme", "formation", "bachelor", "mast√®re", "mastere", "cursus", "dipl√¥me", "etudes"],
            "admission": ["admission", "candidature", "inscription", "entrer", "parcoursup", "int√©grer", "integrer"],
            "campus": ["campus", "locaux", "o√π", "ou", "situ√©", "adresse", "batiment", "equipement"],
            "debouches": ["d√©bouch√©", "debouche", "m√©tier", "metier", "emploi", "carri√®re", "carriere", "travail", "job"],
            "vie_etudiante": ["vie √©tudiante", "vie etudiante", "bde", "√©v√©nement", "evenement", "association", "sortie"],
            "alternance": ["alternance", "rythme", "entreprise", "salaire", "contrat"]
        }
        
        # Chercher les sections pertinentes
        for section, keywords in keywords_map.items():
            if any(keyword in question_lower for keyword in keywords):
                if section in self.knowledge_base:
                    relevant_sections.append(f"### {section.upper()}\n{json.dumps(self.knowledge_base[section], ensure_ascii=False, indent=2)}")
        
        # Si aucune section sp√©cifique, retourner l'info g√©n√©rale
        if not relevant_sections:
            relevant_sections.append(f"### INFORMATIONS G√âN√âRALES\n{json.dumps(self.knowledge_base.get('general', {}), ensure_ascii=False, indent=2)}")
        
        return "\n\n".join(relevant_sections)
    
    def check_faq(self, question):
        """V√©rifie si la question correspond √† une FAQ"""
        question_lower = question.lower()
        for key, answer in self.faq.items():
            if key in question_lower:
                return answer
        return None
    
    def generate_response(self, question):
        """G√©n√®re une r√©ponse √† la question"""
        # V√©rifier d'abord les FAQ
        faq_response = self.check_faq(question)
        if faq_response:
            return faq_response
        
        # Construire le prompt avec contexte pertinent
        relevant_context = self.find_relevant_context(question)
        
        system_prompt = """Tu es une IA repr√©sentant l'EPSI Lyon, √©cole d'ing√©nierie informatique.
Tu dois r√©pondre de mani√®re pr√©cise, amicale et professionnelle aux questions des futurs √©tudiants.
Utilise UNIQUEMENT les informations fournies ci-dessous pour r√©pondre.
Si tu ne trouves pas l'information, dis-le honn√™tement et invite √† contacter l'√©cole.

R√®gles importantes:
- Sois pr√©cis et concis
- Utilise un ton amical mais professionnel
- Ne pas inventer d'informations
- Reste positif sur l'√©cole
"""
        
        full_prompt = f"""{system_prompt}

INFORMATIONS DISPONIBLES:
{relevant_context}

Question de l'√©tudiant: {question}

R√©ponse (sois naturel et direct):"""
        
        # G√©n√©rer la r√©ponse
        response = self.model.generate(
            full_prompt,
            max_tokens=250,
            temp=0.7,
            top_k=40,
            top_p=0.9,
            repeat_penalty=1.2
        )
        
        # Sauvegarder dans l'historique
        self.conversation_history.append({
            "timestamp": datetime.now().isoformat(),
            "question": question,
            "response": response
        })
        
        return response.strip()
    
    def save_history(self):
        """Sauvegarde l'historique des conversations"""
        if self.conversation_history:
            with open('conversation_history.json', 'w', encoding='utf-8') as f:
                json.dump(self.conversation_history, f, ensure_ascii=False, indent=2)
            print(f"\nüíæ Historique sauvegard√© ({len(self.conversation_history)} conversations)")
    
    def run(self):
        """Lance le chatbot"""
        print("\n" + "="*60)
        print("üéì Bienvenue sur le ChatBot de l'EPSI Lyon!")
        print("="*60)
        print("Je peux r√©pondre √† vos questions sur:")
        print("  ‚Ä¢ Les programmes de formation")
        print("  ‚Ä¢ Les admissions et candidatures")
        print("  ‚Ä¢ Le campus et les √©quipements")
        print("  ‚Ä¢ Les d√©bouch√©s professionnels")
        print("  ‚Ä¢ La vie √©tudiante")
        print("  ‚Ä¢ L'alternance")
        print("\nTapez 'quit' ou 'exit' pour quitter")
        print("="*60 + "\n")
        
        while True:
            try:
                question = input("üí¨ Vous: ").strip()
                
                if not question:
                    continue
                
                if question.lower() in ["quit", "exit", "quitter", "sortir"]:
                    print("\nüëã Merci de votre visite! √Ä bient√¥t √† l'EPSI Lyon!")
                    self.save_history()
                    break
                
                print("\nü§ñ EPSI IA: ", end="", flush=True)
                response = self.generate_response(question)
                print(response)
                print()
                
            except KeyboardInterrupt:
                print("\n\nüëã Au revoir!")
                self.save_history()
                break
            except Exception as e:
                print(f"\n‚ùå Erreur: {e}")
                print("Veuillez r√©essayer.\n")

def main():
    try:
        chatbot = EPSIChatbot()
        chatbot.run()
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage: {e}")
        print("Assurez-vous que le mod√®le 'orca-mini-3b-gguf2-q4_0.gguf' est t√©l√©charg√©.")

if __name__ == "__main__":
    main()